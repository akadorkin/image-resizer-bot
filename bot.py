import os
import zipfile
import rarfile
import json
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
import uuid
from dotenv import load_dotenv
import shutil
import logging

from tasks import process_archive_task, process_images_task  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ Celery

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ASPECT_RATIO_TOLERANCE = float(os.getenv("ASPECT_RATIO_TOLERANCE", 0.15))
FINAL_WIDTH = int(os.getenv("FINAL_WIDTH", 900))
FINAL_HEIGHT = int(os.getenv("FINAL_HEIGHT", 1200))

# –ü—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º –∏ —Ñ–∞–π–ª–∞–º
TEMP_DIR = "/app/temp"
STATS_DIR = "/app/stats"
STATS_FILE = os.path.join(STATS_DIR, "stats.json")

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
os.makedirs(TEMP_DIR, exist_ok=True)
os.makedirs(STATS_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def load_stats():
    if not os.path.exists(STATS_FILE):
        stats = {
            "users": [],
            "archives": 0,
            "images": 0,
            "resizes": 0,
            "top_archives": []
        }
        save_stats(stats)
    else:
        with open(STATS_FILE, "r", encoding="utf-8") as f:
            stats = json.load(f)
    return stats

def save_stats(stats):
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(stats, f, ensure_ascii=False, indent=4)

stats = load_stats()

async def start(update: Update, context):
    instructions = (
        "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b> –Ø –±–æ—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
        "üìÅ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ <b>ZIP</b> –∏–ª–∏ <b>RAR</b> —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏/—Ñ–∞–π–ª–∞–º–∏.\n"
        "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG, WEBP, GIF).\n"
        "–Ø –∏–∑–º–µ–Ω—é —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Å—Ç–æ—Ä–æ–Ω <b>1√ó1</b> –¥–æ <b>3√ó4 (900√ó1200)</b> —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º.\n"
        "‚úÖ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b> <b>JPG</b>, <b>PNG</b>, <b>WEBP</b>, <b>GIF</b>.\n"
        "‚ùå <b>Ignored:</b> –í–∏–¥–µ–æ –∏ —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —Ç–æ—á–∫–∏).\n"
        "üì¶ <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞:</b> <b>20 –ú–ë</b>.\n\n"
        "üîó <b>–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥:</b> https://github.com/akadorkin/image-resizer-bot"
    )
    await update.message.reply_text(
        instructions, 
        parse_mode="HTML", 
        disable_web_page_preview=True
    )

async def handle_archive(update: Update, context):
    user_id = update.message.from_user.id
    if user_id not in stats["users"]:
        stats["users"].append(user_id)
        save_stats(stats)
    stats["archives"] += 1
    save_stats(stats)

    file = update.message.document
    file_name = file.file_name.lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    if not (file_name.endswith('.zip') or file_name.endswith('.rar')):
        await update.message.reply_text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ ZIP –∏–ª–∏ RAR.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
    if file.file_size > 20 * 1024 * 1024:
        await update.message.reply_text("‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 20 –ú–ë.")
        return

    temp_folder = os.path.join(TEMP_DIR, str(uuid.uuid4()))
    os.makedirs(temp_folder, exist_ok=True)

    archive_path = os.path.join(temp_folder, file.file_name)

    try:
        telegram_file = await file.get_file()
        await telegram_file.download_to_drive(archive_path)
        logger.info(f"–°–∫–∞—á–∞–Ω –∞—Ä—Ö–∏–≤: {archive_path}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ö–∏–≤–∞
        await update.message.reply_text("üì¶ –ê—Ä—Ö–∏–≤ –≤–∑—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É...")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ Celery –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ö–∏–≤–∞
        task = process_archive_task.delay(archive_path, FINAL_WIDTH, FINAL_HEIGHT, ASPECT_RATIO_TOLERANCE)
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ Celery: {task.id}")

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        result = task.get(timeout=300)  # –¢–∞–π–º–∞—É—Ç 5 –º–∏–Ω—É—Ç

        success = result.get("success", 0)
        errors = result.get("errors", 0)
        elapsed_time = result.get("time", 0)
        processed_archive_path = result.get("processed_archive", None)

        if processed_archive_path and os.path.exists(processed_archive_path):
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
            await update.message.reply_document(
                document=open(processed_archive_path, "rb"),
                filename=os.path.basename(processed_archive_path),
                caption=(
                    f"‚úÖ Processing complete.\n"
                    f"‚è±Ô∏è Execution time: {elapsed_time:.2f} seconds"
                )
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤: {processed_archive_path}")
        else:
            await update.message.reply_text(
                f"‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –Ω–æ –∞—Ä—Ö–∏–≤ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {success}. –ü—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {errors}."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞: {e}")
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ö–∏–≤–∞
        if os.path.exists(temp_folder):
            shutil.rmtree(temp_folder)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ {temp_folder} —É–¥–∞–ª–µ–Ω–∞.")

async def handle_images(update: Update, context):
    user_id = update.message.from_user.id
    if user_id not in stats["users"]:
        stats["users"].append(user_id)
        save_stats(stats)
    stats["images"] += 1
    save_stats(stats)

    temp_folder = os.path.join(TEMP_DIR, str(uuid.uuid4()))
    os.makedirs(temp_folder, exist_ok=True)

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∏–≤—ã—Å—à–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        if update.message.photo:
            images = [update.message.photo[-1]]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - –Ω–∞–∏–≤—ã—Å—à–µ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        elif update.message.document and update.message.document.mime_type.startswith('image/'):
            images = [update.message.document]
        else:
            images = []

        if not images:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return  # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º cleanup –∑–¥–µ—Å—å

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_paths = []
        for image in images:
            try:
                file = await image.get_file()
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
                if hasattr(image, 'file_name') and image.file_name:
                    file_name = image.file_name
                else:
                    # –î–ª—è —Ñ–æ—Ç–æ –±–µ–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è
                    file_name = f"photo_{uuid.uuid4()}.jpg"
                file_path = os.path.join(temp_folder, file_name)
                await file.download_to_drive(file_path)
                logger.info(f"–°–∫–∞—á–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {file_path}")
                image_paths.append(file_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

        if not image_paths:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return  # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º cleanup –∑–¥–µ—Å—å

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ Celery –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        task = process_images_task.delay(user_id, image_paths, FINAL_WIDTH, FINAL_HEIGHT, ASPECT_RATIO_TOLERANCE)
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ Celery: {task.id}")

        # –ü–æ –≤–∞—à–µ–º—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –≤ Celery –∑–∞–¥–∞—á–µ

async def stats_command(update: Update, context):
    stats_message = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
        f"üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(stats['users'])}\n"
        f"üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞—Ä—Ö–∏–≤–æ–≤: {stats['archives']}\n"
        f"üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats['images']}\n"
        f"‚úÇÔ∏è –ò–∑–º–µ–Ω–µ–Ω–æ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {stats['resizes']}\n\n"
        f"üèÜ –¢–æ–ø 3 —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö –∞—Ä—Ö–∏–≤–æ–≤:\n"
    )

    if stats["top_archives"]:
        for i, archive in enumerate(stats["top_archives"], start=1):
            size_mb = archive["size"] / (1024 * 1024)
            time_seconds = archive["time"]
            stats_message += f"{i}. {archive['filename']} - {size_mb:.2f} –ú–ë - ‚è±Ô∏è {time_seconds:.2f} seconds\n"
    else:
        stats_message += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."

    await update.message.reply_text(stats_message)

def main():
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(
        filters.Document.MimeType("application/zip") | filters.Document.MimeType("application/x-rar-compressed"),
        handle_archive
    ))
    application.add_handler(MessageHandler(filters.PHOTO, handle_images))
    application.add_handler(MessageHandler(
        filters.Document.MimeType("image/jpeg") |
        filters.Document.MimeType("image/png") |
        filters.Document.MimeType("image/webp") |
        filters.Document.MimeType("image/gif"),
        handle_images
    ))
    application.add_handler(CommandHandler("stats", stats_command))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
